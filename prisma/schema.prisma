generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("PRISMA_DATABASE_URL")
  directUrl = env("POSTGRES_URL")
}

model User {
  id            String    @id @default(cuid())
  nick          String    @unique // O nick do dançarino, agora único e obrigatório
  email         String?   @unique
  emailVerified DateTime?
  image         String? // URL da imagem de perfil (do Vercel Blob ou do provedor de login)
  bio           String?   @db.Text // Um campo de texto mais longo para a biografia
  instagram     String?
  youtube       String?
  tiktok        String?
  website       String?

  role       String  @default("user") // "user", "moderator", "admin"
  isVerified Boolean @default(false) // O selo de "verificado"

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  accounts Account[]
  sessions Session[]
  musics   Music[]   @relation("SubmittedBy")
}

model Music {
  id        String   @id @default(cuid())
  title     String
  artist    String
  youtubeId String   @unique // O ID do vídeo do YouTube
  duration  Int // Duração em segundos
  category  String
  status    String   @default("pending") // "pending", "approved", "rejected"
  createdAt DateTime @default(now())

  // Relação com o usuário que enviou
  submittedBy   User   @relation("SubmittedBy", fields: [submittedById], references: [id])
  submittedById String
}

// --- NextAuth.js ---
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
